{"version":3,"file":"static/js/285.fa14222f.chunk.js","mappings":"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","sources":["components/Forms/ContactForm/ContactForm.styled.jsx","components/Forms/ContactForm/ContactForm.jsx","components/Forms/LogInForm/LogInForm.jsx","components/Forms/RegistrationForm/RegistrationForm.jsx","components/ContactList/ContactList.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 30px;\n  padding: 5px;\n  padding-bottom: 15px;\n\n  border: 1px solid black;\n  border-radius: 2px;\n\n  & > label {\n    display: flex;\n    flex-direction: column;\n    width: fit-content;\n\n    text-transform: capitalize;\n    font-size: 18px;\n    font-weight: 500;\n\n    & > input {\n      padding: 4px;\n      margin-top: 5px;\n      border: 1px solid darkgray;\n      border-radius: 2px;\n    }\n  }\n\n  & > button {\n    width: fit-content;\n    margin-top: 20px;\n    padding: 6px 12px;\n\n    background-color: white;\n    border: 1px solid darkgray;\n    border-radius: 4px;\n    box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.1215686275),\n      0px 1px 2px 0px rgba(0, 0, 0, 0.0784313725);\n    text-transform: capitalize;\n    font-family: inherit;\n    font-weight: 500;\n\n    &.addIsLoading {\n      background-color: #e5e5f7;\n      opacity: 0.7;\n      background: repeating-linear-gradient(\n        -45deg,\n        #969696,\n        #969696 20px,\n        white 8px,\n        white 40px\n      );\n      background-size: 400% 400%;\n      animation: AnimationName 5s linear infinite;\n      @keyframes AnimationName {\n        0% {\n          background-position: 100%;\n        }\n        50% {\n          background-position: 50%;\n        }\n        100% {\n          background-position: 0%;\n        }\n      }\n    }\n\n    &:hover {\n      cursor: pointer;\n    }\n    &:active {\n      box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.0384313725);\n      background-color: whitesmoke;\n    }\n    &:disabled {\n      opacity: 0.5;\n      background-color: white;\n      box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.1215686275),\n        0px 1px 2px 0px rgba(0, 0, 0, 0.0784313725);\n    }\n  }\n`;\nexport const FormTitleStyled = styled.h1`\n  margin-bottom: 20px;\n  text-transform: uppercase;\n`;\n","import { FormStyled, FormTitleStyled } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  selectAddIsLoading,\n  selectContacts,\n} from 'redux/contacts/contactsSlice';\n\nexport const ContactForm = ({ title }) => {\n  const isLoading = useSelector(selectAddIsLoading);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contact = {\n      name: e.target[0].value,\n      number: e.target[1].value,\n    };\n\n    if (contacts.map(contact => contact.name).includes(contact.name)) {\n      return alert(`${contact.name} is already in contacts`);\n    }\n    dispatch(addContact(contact));\n    e.target.reset();\n    [...e.currentTarget].map(item => item.nodeName === 'INPUT' && item.blur());\n  };\n\n  return (\n    <>\n      <FormTitleStyled>{title}</FormTitleStyled>\n      <FormStyled onSubmit={handleSubmit}>\n        <label>\n          name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button\n          className={isLoading ? 'addIsLoading' : undefined}\n          disabled={isLoading}\n          type=\"submit\"\n        >\n          add contact\n        </button>\n      </FormStyled>\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FormStyled, FormTitleStyled } from '../ContactForm/ContactForm.styled';\nimport { logIn } from 'redux/authorization/operations';\nimport { isLogError } from 'redux/authorization/slice';\n\nexport const LogInForm = ({ title }) => {\n  const dispatch = useDispatch();\n  const loginError = useSelector(isLogError);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const user = {\n      email: form.elements.email.value,\n      password: form.elements.password.value,\n    };\n    dispatch(logIn(user));\n  };\n\n  return (\n    <>\n      <FormTitleStyled>{title}</FormTitleStyled>\n      <FormStyled onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          email\n          <input type=\"email\" name=\"email\" required />\n        </label>\n        <label>\n          password\n          <input type=\"password\" name=\"password\" />\n        </label>\n        <button type=\"submit\">Log In</button>\n      </FormStyled>\n      {loginError && <b style={{ color: 'red' }}>Wrong email or password</b>}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FormStyled, FormTitleStyled } from '../ContactForm/ContactForm.styled';\nimport { registration } from 'redux/authorization/operations';\nimport { isRegError } from 'redux/authorization/slice';\n\nexport const RegistrationForm = ({ title }) => {\n  const dispatch = useDispatch();\n  const regError = useSelector(isRegError);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const user = {\n      name: form.elements.name.value,\n      email: form.elements.email.value,\n      password: form.elements.password.value,\n    };\n    dispatch(registration(user));\n  };\n\n  return (\n    <>\n      <FormTitleStyled>{title}</FormTitleStyled>\n      <FormStyled onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          email\n          <input type=\"email\" name=\"email\" required />\n        </label>\n        <label>\n          password\n          <input type=\"password\" name=\"password\" />\n        </label>\n        <button type=\"submit\">Register</button>\n      </FormStyled>\n      {regError && (\n        <b style={{ color: 'red' }}>This username or email is already in use</b>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  list-style: inside;\n  font-weight: 500;\n  font-size: 18px;\n  letter-spacing: 0.04em;\n\n  & > li {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n\n    &::before {\n      content: '';\n      display: block;\n      align-self: center;\n      width: 6px;\n      height: 6px;\n      background: black;\n      border-radius: 50%;\n    }\n  }\n\n  & > li > button {\n    width: fit-content;\n    padding: 2px 6px;\n    padding-bottom: 0;\n\n    background-color: white;\n    border: 1px solid darkgray;\n    border-radius: 4px;\n    box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.1215686275),\n      0px 1px 2px 0px rgba(0, 0, 0, 0.0784313725);\n    text-transform: capitalize;\n    font-family: inherit;\n    letter-spacing: normal;\n\n    font-weight: 500;\n\n    &.isLoading {\n      background-color: #e5e5f7;\n      opacity: 0.7;\n      background: repeating-linear-gradient(\n        -45deg,\n        #969696,\n        #969696 10px,\n        white 8px,\n        white 20px\n      );\n      background-size: 400% 400%;\n      animation: AnimationName 5s linear infinite;\n      @keyframes AnimationName {\n        0% {\n          background-position: 100%;\n        }\n        50% {\n          background-position: 50%;\n        }\n        100% {\n          background-position: 0%;\n        }\n      }\n    }\n\n    &:hover {\n      cursor: pointer;\n    }\n    &:active {\n      box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.0384313725);\n      background-color: whitesmoke;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      background-color: white;\n      box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.1215686275),\n        0px 1px 2px 0px rgba(0, 0, 0, 0.0784313725);\n    }\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ contact }) => {\n  const [isActive, setIsActive] = useState(false);\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <li>\n      {contact.name}:<span>{contact.number}</span>\n      <button\n        className={isActive ? 'isLoading' : undefined}\n        type=\"button\"\n        disabled={isActive}\n        onClick={() => {\n          setIsActive(true);\n          handleDelete(contact.id);\n        }}\n      >\n        delete\n      </button>\n    </li>\n  );\n};\n","import { ContactListStyled } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/contactsFilterSlice';\nimport { Contact } from 'components/Contact/Contact';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleFilterContact = () => {\n    const filterToLowerCase = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterToLowerCase)\n    );\n  };\n\n  const visibleContacts = handleFilterContact().sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  const noContacts = contacts.length === 0;\n  const isContactsTrue = contacts.length > 0;\n  const isVisibleContactsTrue = visibleContacts.length > 0;\n\n  return (\n    <ContactListStyled>\n      {isLoading && noContacts\n        ? 'Loading...'\n        : isContactsTrue\n        ? isVisibleContactsTrue\n          ? visibleContacts.map(contact => (\n              <Contact key={contact.id} contact={contact} />\n            ))\n          : 'No matches found'\n        : 'Contacts list is empty'}\n    </ContactListStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.label`\n  display: flex;\n  width: fit-content;\n  flex-direction: column;\n  margin-bottom: 30px;\n\n  font-size: 18px;\n  font-weight: 500;\n\n  & > input {\n    padding: 4px;\n    margin-top: 5px;\n    border: 1px solid darkgray;\n    border-radius: 2px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterStyled } from './Filter.styled';\nimport { filterContacts } from 'redux/contacts/contactsFilterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterHandler = e => {\n    e.preventDefault();\n    const filter = e.target;\n    dispatch(filterContacts(filter.value));\n  };\n\n  return (\n    <FilterStyled>\n      Find contcts by name\n      <input type=\"text\" onChange={filterHandler}></input>\n    </FilterStyled>\n  );\n};\n","import { RegistrationForm } from 'components';\n\nconst Register = () => {\n  return <RegistrationForm title=\"Registration\" />;\n};\n\nexport default Register;\n"],"names":["FormStyled","styled","FormTitleStyled","ContactForm","title","isLoading","useSelector","selectAddIsLoading","contacts","selectContacts","dispatch","useDispatch","onSubmit","e","preventDefault","contact","name","target","value","number","map","includes","alert","addContact","reset","currentTarget","item","nodeName","blur","type","pattern","required","className","undefined","disabled","LogInForm","loginError","isLogError","form","user","email","elements","password","logIn","autoComplete","style","color","RegistrationForm","regError","isRegError","registration","ContactListStyled","Contact","useState","isActive","setIsActive","onClick","id","deleteContact","ContactList","filter","selectFilter","selectIsLoading","visibleContacts","filterToLowerCase","toLowerCase","handleFilterContact","sort","a","b","localeCompare","noContacts","length","isContactsTrue","isVisibleContactsTrue","FilterStyled","Filter","onChange","filterContacts"],"sourceRoot":""}